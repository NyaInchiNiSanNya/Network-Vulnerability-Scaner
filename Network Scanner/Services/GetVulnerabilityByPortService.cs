using IServices;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using RestSharp;

namespace Services
{
    public class GetVulnerabilityByVersionService: IGetVulnerabilityByPortVersion
    {

        public async Task<String> GetVulnerabilityByVersion(String serviceVersion)
        { try
            { if (!String.IsNullOrEmpty(serviceVersion))
                {
                    String parseResult = "";
                    //Создает новый экземпляр класса RestClient, указывая URL-адрес сервиса, с которым будет осуществляться обмен данными.
                    //В данном случае изпользуется американская база данных уязвимостей (National Vulnerability Database, NVD)
                    var client = new RestClient("https://services.nvd.nist.gov/rest/json/cves/2.0");
                    var request = new RestRequest();
                    //Определяется интервал времени переводится в ISO-8601
                    DateTime today = DateTime.Now;
                    DateTime newDate = today.AddDays(-100);
                    String isoDate = newDate.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
                    //ВВодятся параметры поиска, а именно версия сервиса, временной интервал публикации уязвимости и количество уязвимостей
                    request.AddParameter("keywordSearch", RemoveBrackets(serviceVersion));
                    request.AddParameter("startIndex", "0");
                    request.AddParameter("resultsPerPage", "10");
                    //получаем ответ
                    RestResponse response = client.Execute(request);
                    var content = response.Content;
                    dynamic data = JsonConvert.DeserializeObject(content);

                    //из каждой найденной уязвимости получаем id, описание и первую ссылку на подробное описание
                    foreach (var result in data.vulnerabilities)
                    {

                        parseResult += result.cve.id + "<br>";
                        parseResult += result.cve.descriptions[0].value + "<br>";
                        parseResult += "<a href= " + result.cve.references[0].url + ">" + "Источник" + "<a>" +
                                       "<br><br>";
                    }

                    return parseResult;
                }
            }
            catch
            {
                return "Ошибка";}
            return "Ничего не найдено";
        }
        public static string RemoveBrackets(string input)
        {
            int startIndex = input.IndexOf('(');

            while (startIndex != -1)
            {
                int endIndex = input.IndexOf(')', startIndex);

                if (endIndex == -1)
                {
                    break;
                }

                input = input.Remove(startIndex, endIndex - startIndex + 1);
                startIndex = input.IndexOf('(', startIndex);
            }

            return input.Replace("/", " ").Replace(@"\", " ").Trim();
        }
    }
}

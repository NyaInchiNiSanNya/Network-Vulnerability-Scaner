using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Core.DTOs;
using IServices;
using Services.PacketsAnalizator;

namespace Services
{
    public class ServiceServicePortScanService:IServicePortScan
    {
        public async Task<Dictionary<String, Dictionary<String, String>>> GetPortsInformation(String Host, List<Int32> openPorts,Boolean TCP, Boolean UDP)
        {
            Dictionary<String, Dictionary<String, String>> Result=new Dictionary<String,Dictionary<String,String>>();

            foreach (Int32 openPort in openPorts)
            {
                switch (openPort)
                {
                    case 80:
                        Result.Add("80", _80Http.httpScanner(Host));
                        break;
                    case 443:
                        Result.Add("443", _443Https.httpsScanner(Host));
                        break;
                    case 1433:
                        Result.Add("1443", _1433SQLserver.SQLServerScanner(Host));
                        break;
                    
                    default:
                        Result.Add(Convert.ToString(openPort), await _GetServiceNameAndVersion(Host, Convert.ToString(openPort),TCP,UDP));
                        break;


                }

            }
            return Result;
        }

        private async static Task<Dictionary<String, String>> _GetServiceNameAndVersion(String host, String port,Boolean TCP, Boolean UDP)
        {
            Dictionary<String, String> ScannerResult = new Dictionary<String, String>();
            if (TCP)
            {
                try
                {

                    string arguments = $"-sS -p {port} -A {host}";

                    Process process = new Process();
                    process.StartInfo.FileName = "nmap";
                    process.StartInfo.Arguments = arguments;
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.RedirectStandardOutput = true;
                    process.Start();

                    while (!process.StandardOutput.EndOfStream)
                    {
                        String line = process.StandardOutput.ReadLine();
                        string pattern = @"^(\d+)\/\w+\s+(\w+)\s+(.+)$";
                        Regex regex = new Regex(pattern, RegexOptions.Multiline);
                        MatchCollection matches = regex.Matches(line);

                        foreach (Match match in matches)
                        {
                            ScannerResult.Add("Service", match.Groups[3].Value.Split(" ")[0]);
                            try
                            {
                                ScannerResult.Add("Version", match.Groups[3].Value.Substring(match.Groups[3].Value.IndexOf(' ') + 1));
                            }
                            catch (NullReferenceException)
                            {
                                
                            }
                        }
                    }

                    process.WaitForExit();

                }
                catch
                {
                    return null;
                }
            }

            if (UDP)
            {
                try
                {
                    string arguments = $"-sU -p {port} -A {host}";

                    Process process = new Process();
                    process.StartInfo.FileName = "nmap";
                    process.StartInfo.Arguments = arguments;
                    process.StartInfo.UseShellExecute = false;
                    process.StartInfo.RedirectStandardOutput = true;
                    process.Start();

                    while (!process.StandardOutput.EndOfStream)
                    {
                        String line = process.StandardOutput.ReadLine();
                        string pattern = @"^(\d+)\/\w+\s+(\w+)\s+(.+)$";
                        Regex regex = new Regex(pattern, RegexOptions.Multiline);
                        MatchCollection matches = regex.Matches(line);

                        foreach (Match match in matches)
                        {
                            ScannerResult.Add("Service", match.Groups[3].Value.Split(" ")[0]);
                            try
                            {
                                ScannerResult.Add("Version", match.Groups[3].Value.Split(" ")[1]);
                            }
                            catch (NullReferenceException)
                            {

                            }
                        }
                    }

                    process.WaitForExit();

                }
                catch(NullReferenceException)
                {
                    
                }
            }

            return ScannerResult;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Sockets;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using IServices;

namespace Services
{
    public class ActiveHostScanService: ICheckIfHostActiveService
    {
        class ICMP
        {
            public Byte Type;
            public Byte Code;
            public UInt16 Checksum;
            public Int32 MessageSize;
            public Byte[] Message = new Byte[1024];

            public ICMP()
            {
            }

            public ICMP(Byte[] data, Int32 size)
            {
                Type = data[20];
                Code = data[21];
                Checksum = BitConverter.ToUInt16(data, 22);
                MessageSize = size - 24;
                Buffer.BlockCopy(data, 24, Message, 0, MessageSize);
            }

            public byte[] getBytes()
            {
                Byte[] data = new Byte[MessageSize + 9];
                Buffer.BlockCopy(BitConverter.GetBytes(Type), 0, data, 0, 1);
                Buffer.BlockCopy(BitConverter.GetBytes(Code), 0, data, 1, 1);
                Buffer.BlockCopy(BitConverter.GetBytes(Checksum), 0, data, 2, 2);
                Buffer.BlockCopy(Message, 0, data, 4, MessageSize);
                return data;
            }

            public UInt16 getChecksum()
            {
                UInt32 chcksm = 0;
                Byte[] data = getBytes();
                Int32 packetsize = MessageSize + 8;
                Int32 index = 0;

                while (index < packetsize)
                {
                    chcksm += Convert.ToUInt32(BitConverter.ToUInt16(data, index));
                    index += 2;
                }
                chcksm = (chcksm >> 16) + (chcksm & 0xffff);
                chcksm += (chcksm >> 16);
                return (UInt16)(~chcksm);
            }
        }
        public async Task<Boolean> IsActiveHostAsync(String ip)
        {
            Byte[] data = new Byte[1024];
            Int32 recv;
            Socket host = new Socket(AddressFamily.InterNetwork, SocketType.Raw,
                System.Net.Sockets.ProtocolType.Icmp);
            IPEndPoint iep = new IPEndPoint(IPAddress.Parse(ip), 0);
            EndPoint ep = (EndPoint)iep;
            ICMP packet = new ICMP();

            packet.Type = 0x08;
            packet.Code = 0x00;
            packet.Checksum = 0;
            Buffer.BlockCopy(BitConverter.GetBytes((short)1), 0, packet.Message, 0, 2);
            Buffer.BlockCopy(BitConverter.GetBytes((short)1), 0, packet.Message, 2, 2);
            data = Encoding.ASCII.GetBytes("test packet");
            Buffer.BlockCopy(data, 0, packet.Message, 4, data.Length);
            packet.MessageSize = data.Length + 4;
            Int32 packetsize = packet.MessageSize + 4;

            UInt16 chcksum = packet.getChecksum();
            packet.Checksum = chcksum;

            host.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveTimeout, 3000);
            host.SendTo(packet.getBytes(), packetsize, SocketFlags.None, iep);
            try
            {
                data = new byte[1024];
                recv = host.ReceiveFrom(data, ref ep);
            }
            catch (SocketException)
            {
                return false;
            }
            ICMP response = new ICMP(data, recv);
            if (response.Type == 0 && response.Code == 0)
            { 
                return true;
            }

            host.Close();
            return false;
        }
    }
}

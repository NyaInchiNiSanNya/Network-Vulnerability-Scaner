using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace Services.PacketsAnalizator
{
    internal class _443Https
    {
        internal static Dictionary<String, String> httpsScanner(String host)
        {
            Dictionary<String, String> ScannerResult = new Dictionary<String, String>();


            ScannerResult.Add("Service","HTTPS");
            ScannerResult.Add("Version", GetServerVersion(host));

            //Требуется Имя хоста
            List<String> SSLscanResult = SSL_info(host);

            if (SSLscanResult is not null)
            {
                ScannerResult.Add("SSL", SSLscanResult[0]);
                ScannerResult.Add("Encryption", SSLscanResult[1]);
                ScannerResult.Add("Hash", SSLscanResult[2]);
            }

            return ScannerResult;
        }

        internal static String GetServerVersion(String host)
        {
            Int32 port = 443;
            string request = "GET / HTTP/1.1\r\nHost: " + host + "\r\nConnection: close\r\n\r\n";


            TcpClient client = new TcpClient(host, port);
            NetworkStream stream = client.GetStream();
            StreamWriter writer = new StreamWriter(stream);
            writer.Write(request);
            writer.Flush();

            StreamReader reader = new StreamReader(stream);
            string response = reader.ReadToEnd();

            //Достаем версию сервера
            Regex regex = new Regex(@"Server:\s*(.+)", RegexOptions.IgnoreCase);
            MatchCollection matches = regex.Matches(response);

            if (matches.Count > 0)
            {
                String Server = String.Empty;

                foreach (Match match in matches)
                {
                    Server = match.Value.Substring(8);
                }

                return Server;
            }
            else
            {
                return null;
            }
        }

        internal static List<String> SSL_info(String host)
        {
            try
            {
                Int32 port = 443;


                IPAddress ipAddress = IPAddress.Parse(host);
                String hostname = Regex.Replace(Dns.GetHostEntry(ipAddress).HostName, "^ack\\.", "");
                List<String> Result = new List<String>();

                using (var client = new TcpClient(host, port))
                {

                    var stream = client.GetStream();
                    var sslStream = new System.Net.Security.SslStream(stream);
                    sslStream.AuthenticateAsClient(hostname);

                    Result.Add($"{sslStream.SslProtocol}");
                    Result.Add($"{sslStream.CipherAlgorithm}");
                    Result.Add($"{sslStream.HashAlgorithm}");

                    sslStream.Close();
                    stream.Close();
                }

                return Result;
            }
            catch
            {
                return null;
            }
        }
    }
}

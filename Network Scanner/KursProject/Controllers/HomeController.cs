using System.Text.RegularExpressions;
using KursProject.Models;
using KursProject.Models.ViewModels;
using Microsoft.AspNetCore.Mvc;

using AutoMapper;
using Core.DTOs;
using IServices;


namespace KursProject.Controllers
{
    public class HomeController : Controller
    {
        private readonly IOpenPortsScanService _openPortsScanner;
        private readonly IMapper _mapper;
        private readonly IServicePortScan _getInfoFromServicePorts;
        private readonly ICheckIfHostActiveService _checkIfHostActive;
        private readonly IGetVulnerabilityByPortVersion _getVulnerability;

        public HomeController
            (IOpenPortsScanService openPortsScanner, IMapper mapper,
                IServicePortScan getInfoFromServicePorts, ICheckIfHostActiveService checkIfHostActive, IGetVulnerabilityByPortVersion getVulnerability)
        {
            if (openPortsScanner is null)
            {
                throw new ArgumentNullException(nameof(openPortsScanner));
            }
            _openPortsScanner = openPortsScanner;
            if (mapper is null)
            {
                throw new ArgumentNullException(nameof(mapper));
            }

            _mapper = mapper;

            if (getInfoFromServicePorts is null)
            {
                throw new ArgumentNullException(nameof(getInfoFromServicePorts));
            }

            _getInfoFromServicePorts = getInfoFromServicePorts;

            if (checkIfHostActive is null)
            {
                throw new ArgumentNullException(nameof(checkIfHostActive));
            }

            _checkIfHostActive = checkIfHostActive;

            if (getVulnerability is null)
            {
                throw new ArgumentNullException(nameof(getVulnerability));
            }

            _getVulnerability = getVulnerability;
        }

        public IActionResult Index()
        {

            return View();
        }

        [HttpPost]
        public async Task<IActionResult> GetScanResult([FromForm] ScanConfigurationViewModel model)
        {
            //Итоговый результат сканирования, который будет отправлен клиенту
            Dictionary<String, Dictionary<String, Dictionary<String, String>>> ScanResult
                = new Dictionary<String, Dictionary<String, Dictionary<String, String>>>();
            if (ModelState.IsValid)
            {
                //Валидируем ip адрес
                Regex regex = new Regex(@"^(\d{1,3}\.\d{1,3}\.\d{1,3}\.)(\d{1,3})((-)(\d{1,3}))?$");
                Match match = regex.Match(model.ipAddress);
                if (match.Success)
                {
                    //Разделяем ip адрес и диапазон ip адресов
                    String ipAddress = match.Groups[1].Value + match.Groups[2].Value;

                    //Проверяем активен ли первый хост 
                    if (await _checkIfHostActive.IsActiveHostAsync(ipAddress))
                    {
                        model.ipAddress = ipAddress;
                        //если хост активен добавляем его в отчет, а также его открытые порты 
                        ScanResult.Add(ipAddress, await GetOpenPortsAndServicesInfoAsync(model));
                    }
                    //проверяем, запросил ли пользователь сканирование диапозонов ip
                    if (match.Groups[3].Success)
                    {
                        //определяем диапазон адресов
                        Int32 start = Int32.Parse(match.Groups[2].Value) + 1;
                        Int32 end = Int32.Parse(match.Groups[5].Value);
                        //через цикл находим все активные хосты и сканируем их порты
                        for (Int32 i = start + 1; i <= end; i++)
                        {
                            ipAddress = match.Groups[1].Value + i.ToString();

                            if (await _checkIfHostActive.IsActiveHostAsync(ipAddress))
                            {
                                model.ipAddress = ipAddress;
                                ScanResult.Add(ipAddress, await GetOpenPortsAndServicesInfoAsync(model));
                            }

                        }

                    }

                }

            }
            //отправляем пользователю отчет
            return View("ResultView", ScanResult);
        }



        [HttpPost]
        public async Task<IActionResult> GetPortVulnerability([FromBody] string version)
        {
            return Ok(await _getVulnerability.GetVulnerabilityByVersion(version));
        }





        [NonAction]
        private async Task<Dictionary<String, Dictionary<String, String>>>
            GetOpenPortsAndServicesInfoAsync(ScanConfigurationViewModel model)
        {
            List<Int32> OpenPorts = new List<Int32>();
            HostDTO modelDto = _mapper.Map<HostDTO>(model);
            //Проверяем введены ли пользователем конкретные порты
            if (!String.IsNullOrEmpty(model.Ports))
            {
                try
                {
                    modelDto.PortsList = new List<int>();
                    
                    //подготавливаем введенные порты к отправке в сервис сканирования 
                    foreach (String s in model.Ports.Split(' '))
                    {
                        modelDto.PortsList.Add(int.Parse(s));
                    }
                }
                catch
                {
                    return null;
                }
            }
            OpenPorts = await _openPortsScanner.GetOpenPorts(modelDto);
            //если открытых портв не найдено, отправляем пустой результат
            if (OpenPorts is null)
            {
                return null;
            }
            // Если есть открытые порты, то отправляем их список в сервис для получения дополнительной информации о них
            return await _getInfoFromServicePorts.GetPortsInformation(model.ipAddress, OpenPorts, modelDto.TCP, model.UDP);
        }


    }
}